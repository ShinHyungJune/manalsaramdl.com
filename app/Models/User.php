<?php

namespace App\Models;

use App\Enums\Sex;
use Carbon\Carbon;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class User extends Authenticatable implements HasMedia
{
    use HasApiTokens, HasFactory, Notifiable, InteractsWithMedia;

    use SoftDeletes;

    protected $fillable = [
        'email',
        'contact',
        'name',
        'sex',
        'birth',
        'job',
        'school',
        'city',
        'area',
        'need_service',
        'registration_way',

        "nickname",
        'city_company',
        'area_company',
        'tall',
        'weight',
        'instagram',
        'ideal',
        'introduce',
        'to_manager',
        'marriage',
        'comment_manager',
        'count_dating',
        "agree_marketing",

        'password',
        "verified_at",
        "social_id",
        "social_platform",
        "reason_leave_out",

        "account",
        "bank",
        "owner",

        "comment1",
        "comment2",
        "comment3",
        "comment4",
        "comment5",
        "comment6",
        "comment7",
        "comment8",
        "comment9",
        "comment10",
        "memo",
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    protected $appends = ["img"];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
    }

    public function registerMediaCollections():void
    {
        $this->addMediaCollection('img')->singleFile();
        $this->addMediaCollection('imgs');
    }

    public function getImgAttribute()
    {
        if($this->hasMedia('img')) {
            $media = $this->getMedia('img')[0];

            return [
                "name" => $media->file_name,
                "type" => $media->mime_type,
                "url" => $media->getFullUrl(),
            ];
        }

        return null;
    }

    public function getImgsAttribute()
    {
        $items = [];

        if($this->hasMedia('imgs')) {
            $medias = $this->getMedia('imgs');

            foreach($medias as $media){
                $items[] = [
                    "name" => $media->file_name,
                    "type" => $media->mime_type,
                    "url" => $media->getFullUrl(),
                ];
            }
        }

        return $items;
    }

    public function getAlarmAttribute()
    {
        /*if($this->chats()->wherePivot("has_new_message", 1)->count() > 0)
            return 1;*/

        if($this->datings()->where($this->getReadColumn(), false)->count() > 0)
            return 1;

        return 0;
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }

    public function refunds()
    {
        return $this->hasMany(Refund::class);
    }

    public function chats()
    {
        return $this->belongsToMany(Chat::class)->withPivot([
            "has_new_message"
        ]);

    }
    public function reviews()
    {
        return $this->hasMany(Review::class);
    }

    public function orderProducts()
    {
        return $this->hasMany(OrderProduct::class);
    }

    public function datings()
    {
        return $this->hasMany(Dating::class, $this->getIdColumn());
    }

    public function getReadColumn()
    {
        return $this->sex == Sex::MEN ? "read_men" : "read_women";
    }

    public function getIdColumn()
    {
        return $this->sex == Sex::MEN ? "men_id" : "women_id";
    }

    public function getPartnerRelation()
    {
        return $this->sex == Sex::MEN ? "men" : "women";
    }

    public function feedbacks()
    {
        return $this->hasMany(Feedback::class);
    }
}
